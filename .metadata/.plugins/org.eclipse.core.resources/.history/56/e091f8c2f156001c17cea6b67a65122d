package com.projeto.viagem.controller;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.projeto.viagem.controller.dto.ViagemDTO;
import com.projeto.viagem.entity.Cliente;
import com.projeto.viagem.entity.Estado;
import com.projeto.viagem.entity.Viagem;
import com.projeto.viagem.repository.ClienteRepository;
import com.projeto.viagem.repository.EstadoRepository;
import com.projeto.viagem.repository.ViagemRepository;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/viagem")
@RequiredArgsConstructor
public class ViagemController {
	
	private final ClienteRepository clienteRpository;
	private final ViagemRepository viagemRepository;
	private final EstadoRepository estadoRepository;
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Viagem salvar(@RequestBody ViagemDTO dto) {
		
		LocalDate data = LocalDate.parse(dto.getData(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		
		Integer idCliente = dto.getIdCliente();
		Integer idOrigem = dto.getOrigem();
		Integer idDestino = dto.getDestino();
		
		Cliente cliente = clienteRpository.findById(idCliente)
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST));
		
		Estado origem = estadoRepository.findById(idOrigem)
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST));
		
		Estado destino = estadoRepository.findById(idDestino)
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST));
		
		Viagem viagem = new Viagem();
		viagem.setData(data);
		viagem.setCliente(cliente);
		viagem.setOrigem(origem);
		viagem.setDestino(destino);

		return viagemRepository.save(viagem);
	}
	
	@GetMapping("{id}")
	public Viagem buscarViagem(@PathVariable Integer id){
		return viagemRepository
				.findById(id)
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));
	}

	@GetMapping
	public List<Viagem> buscaPorCliente(
			@RequestParam(value = "idCliente", required = false )Integer idCliente){
		return viagemRepository.findByIdCliente(idCliente);
	}
	
	/*@GetMapping("/consultar/{idcliente}/{idviagem}")
	public ResponseEntity<?> consultarViagem(
			@PathVariable(value = "idcliente") Integer idcliente,
			@PathVariable(value = "idviagem") Integer idviagem){
		Viagem consulta = (idcliente, idviagem);
		if(consulta == null) {
			return new ResponseEntity<String>("Viagem ou cliente inv√°lido", HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<Viagem>(consulta, HttpStatus.ACCEPTED);
	}*/
//	
//	@GetMapping("/api/viagem/cliente/{id}")
//	public ResponseEntity<List<Viagem>> getAll(
//		@PathVariable(value = "idcliente")Cliente idcliente) {
//		return ResponseEntity.ok(viagemRepository.findAll());
//	}

}
